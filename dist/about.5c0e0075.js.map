{"mappings":"AACA,oBAAoB;AACpB,MAAM,YAAY;AAClB,MAAM,UAAU,KAAK,iCAAiC;AAEtD,SAAS,gBAAgB,CAAC,kBAAkB,OAAO,CAAC,CAAC,eAAe;IAChE,0CAA0C;IAC1C,MAAM,SAAS,SAAS,aAAa,CAAC;IACtC,OAAO,EAAE,GAAG,CAAC,kBAAkB,EAAE,MAAM,CAAC;IACxC,OAAO,KAAK,GAAG,cAAc,WAAW,EAAE,wCAAwC;IAClF,OAAO,MAAM,GAAG,IAAI,oCAAoC;IACxD,OAAO,KAAK,CAAC,QAAQ,GAAG;IACxB,OAAO,KAAK,CAAC,IAAI,GAAG,cAAc,UAAU,GAAG;IAC/C,OAAO,KAAK,CAAC,GAAG,GAAG,AAAC,cAAc,SAAS,GAAG,KAAM;IAGpD,6CAA6C;IAC7C,cAAc,UAAU,CAAC,YAAY,CAAC,QAAQ,cAAc,WAAW;IAEvE,8CAA8C;IAC9C,uBAAuB;AAC3B;AAGA,SAAS,uBAAuB,MAAM;IAClC,MAAM,MAAM,OAAO,UAAU,CAAC;IAC9B,MAAM,SAAS;QACX,GAAG,OAAO,MAAM,GAAG;QACnB,SAAS;QACT,eAAe;QACf,UAAU;QACV,QAAQ;QACR,YAAY;IAChB;IAEA,SAAS;QACL,MAAM,WAAW,OAAO,CAAC,GAAG,OAAO,OAAO;QAC1C,MAAM,WAAW,OAAO,MAAM;QAC9B,IAAI,WAAW,GAAG;QAElB,IAAI,SAAS;QACb,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC;QACtB,IAAI,aAAa,CACb,WAAW,IAAI,UACf,WAAW,IAAI,UACf,OAAO,KAAK,EAAE,OAAO,CAAC;QAE1B,IAAI,MAAM;IACd;IAEA,SAAS;QACL,IAAI,SAAS,CAAC,GAAG,GAAG,OAAO,KAAK,EAAE,OAAO,MAAM;QAE/C,MAAM,QAAQ,YAAa,CAAA,OAAO,aAAa,GAAG,OAAO,OAAO,AAAD;QAC/D,MAAM,eAAe,QAAQ,GAAG,oBAAoB;QACpD,OAAO,QAAQ,GAAG,UAAW,CAAA,OAAO,QAAQ,GAAG,YAAW;QAC1D,OAAO,OAAO,IAAI,OAAO,QAAQ;QAEjC;QAEA,sBAAsB;IAC1B;IAEA,OAAO,gBAAgB,CAAC,aAAa,SAAS,CAAC;QAC3C,MAAM,OAAO,OAAO,qBAAqB;QACzC,MAAM,SAAS,EAAE,OAAO,GAAG,KAAK,IAAI;QACpC,MAAM,SAAS,EAAE,OAAO,GAAG,KAAK,GAAG;QAEnC,MAAM,YAAY,KAAK,GAAG,CAAC,OAAO,CAAC,GAAG;QACtC,MAAM,qBAAqB,OAAO,UAAU,GAAG,QAAQ,0CAA0C;QAEjG,IAAI,YAAY,KAAK;YACjB,MAAM,eAAe,KAAK,GAAG,CAAC,GAAG,KAAK,YAAY;YAClD,OAAO,aAAa,GAAG,qBAAqB,IAAI,CAAC,eAAe;YAChE,OAAO,MAAM,GAAG;QACpB,OACI,OAAO,aAAa,GAAG;QAG3B,OAAO,UAAU,GAAG;IACxB;IAEA,OAAO,gBAAgB,CAAC,YAAY;QAChC,OAAO,aAAa,GAAG;IAC3B;IAEA;AACJ","sources":["scripts/strings.js"],"sourcesContent":["\n/// Spring constants\nconst stiffness = 0.1;\nconst damping = 0.9; // Adjust for more or less jiggle\n\ndocument.querySelectorAll('.string-target').forEach((targetElement, index) => {\n    // Create a canvas element for each string\n    const canvas = document.createElement('canvas');\n    canvas.id = `guitarStringCanvas${index}`;\n    canvas.width = targetElement.offsetWidth; // Match the width of the target element\n    canvas.height = 50; // Set a fixed height for the string\n    canvas.style.position = 'absolute';\n    canvas.style.left = targetElement.offsetLeft + 'px';\n    canvas.style.top = (targetElement.offsetTop + 16) + 'px';\n\n\n    // Insert the canvas after the target element\n    targetElement.parentNode.insertBefore(canvas, targetElement.nextSibling);\n\n    // Initialize the guitar string on this canvas\n    initializeGuitarString(canvas);\n});\n\n\nfunction initializeGuitarString(canvas) {\n    const ctx = canvas.getContext('2d');\n    const string = {\n        y: canvas.height / 2, \n        tension: 0, \n        targetTension: 0, \n        velocity: 0, \n        mouseX: 0, \n        lastMouseY: 0\n    };\n\n    function drawString() {\n        const controlY = string.y + string.tension; \n        const controlX = string.mouseX;\n        ctx.strokeStyle = 'white';\n\n        ctx.beginPath();\n        ctx.moveTo(0, string.y);\n        ctx.bezierCurveTo(\n            controlX - 50, controlY, \n            controlX + 50, controlY, \n            canvas.width, string.y\n        );\n        ctx.stroke();\n    }\n\n    function animate() {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        \n        const force = stiffness * (string.targetTension - string.tension);\n        const acceleration = force / 1; // Assuming mass = 1\n        string.velocity = damping * (string.velocity + acceleration);\n        string.tension += string.velocity;\n\n        drawString();\n\n        requestAnimationFrame(animate);\n    }\n\n    canvas.addEventListener('mousemove', function(e) {\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        const yDistance = Math.abs(string.y - mouseY);\n        const yMovementDirection = string.lastMouseY - mouseY; // Positive if moving down, negative if up\n\n        if (yDistance < 100) {\n            const bendStrength = Math.max(0, 20 - yDistance / 2);\n            string.targetTension = yMovementDirection > 0 ? -bendStrength : bendStrength;\n            string.mouseX = mouseX;\n        } else {\n            string.targetTension = 0;\n        }\n\n        string.lastMouseY = mouseY;\n    });\n\n    canvas.addEventListener('mouseout', function() {\n        string.targetTension = 0;\n    });\n\n    animate();\n}"],"names":[],"version":3,"file":"about.5c0e0075.js.map","sourceRoot":"/__parcel_source_root/"}