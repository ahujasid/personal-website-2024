{"mappings":"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","sources":["scripts/fluidSimulation.js"],"sourcesContent":["/*\nMIT License\n\nCopyright (c) 2017 Pavel Dobryakov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n'use strict';\n\n// Mobile promo section\n\n\n// Simulation section\n\nconst canvas = document.getElementsByTagName('canvas')[0];\nresizeCanvas();\n\nlet config = {\n    SIM_RESOLUTION: 128,\n    DYE_RESOLUTION: 1024,\n    CAPTURE_RESOLUTION: 512,\n    DENSITY_DISSIPATION: 2,\n    VELOCITY_DISSIPATION: 0.8,\n    PRESSURE: 0.8,\n    PRESSURE_ITERATIONS: 20,\n    CURL: 0,\n    SPLAT_RADIUS: 0.15,\n    SPLAT_FORCE: 3000,\n    SHADING: false,\n    COLORFUL: true,\n    COLOR_UPDATE_SPEED: 5,\n    PAUSED: false,\n    BACK_COLOR: { r: 0, g: 0, b: 0 },\n    TRANSPARENT: false,\n    BLOOM: true,\n    BLOOM_ITERATIONS: 8,\n    BLOOM_RESOLUTION: 256,\n    BLOOM_INTENSITY: 0.2,\n    BLOOM_THRESHOLD: 0.6,\n    BLOOM_SOFT_KNEE: 0.7,\n    SUNRAYS: false,\n    SUNRAYS_RESOLUTION: 196,\n    SUNRAYS_WEIGHT: 0.5,\n}\n\nfunction pointerPrototype () {\n    this.id = -1;\n    this.texcoordX = 0;\n    this.texcoordY = 0;\n    this.prevTexcoordX = 0;\n    this.prevTexcoordY = 0;\n    this.deltaX = 0;\n    this.deltaY = 0;\n    this.down = false;\n    this.moved = false;\n    this.color = [30, 0, 300];\n}\n\nlet pointers = [];\nlet splatStack = [];\npointers.push(new pointerPrototype());\n\nconst { gl, ext } = getWebGLContext(canvas);\n\nif (isMobile()) {\n    config.DYE_RESOLUTION = 512;\n}\nif (!ext.supportLinearFiltering) {\n    config.DYE_RESOLUTION = 512;\n    config.SHADING = false;\n    config.BLOOM = false;\n    config.SUNRAYS = false;\n}\n\n// startGUI();\n\nfunction getWebGLContext (canvas) {\n    const params = { alpha: true, depth: false, stencil: false, antialias: false, preserveDrawingBuffer: false };\n\n    let gl = canvas.getContext('webgl2', params);\n    const isWebGL2 = !!gl;\n    if (!isWebGL2)\n        gl = canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params);\n\n    let halfFloat;\n    let supportLinearFiltering;\n    if (isWebGL2) {\n        gl.getExtension('EXT_color_buffer_float');\n        supportLinearFiltering = gl.getExtension('OES_texture_float_linear');\n    } else {\n        halfFloat = gl.getExtension('OES_texture_half_float');\n        supportLinearFiltering = gl.getExtension('OES_texture_half_float_linear');\n    }\n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n    const halfFloatTexType = isWebGL2 ? gl.HALF_FLOAT : halfFloat.HALF_FLOAT_OES;\n    let formatRGBA;\n    let formatRG;\n    let formatR;\n\n    if (isWebGL2)\n    {\n        formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType);\n        formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);\n        formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);\n    }\n    else\n    {\n        formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n        formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n        formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    }\n\n    // ga('send', 'event', isWebGL2 ? 'webgl2' : 'webgl', formatRGBA == null ? 'not supported' : 'supported');\n\n    return {\n        gl,\n        ext: {\n            formatRGBA,\n            formatRG,\n            formatR,\n            halfFloatTexType,\n            supportLinearFiltering\n        }\n    };\n}\n\nfunction getSupportedFormat (gl, internalFormat, format, type)\n{\n    if (!supportRenderTextureFormat(gl, internalFormat, format, type))\n    {\n        switch (internalFormat)\n        {\n            case gl.R16F:\n                return getSupportedFormat(gl, gl.RG16F, gl.RG, type);\n            case gl.RG16F:\n                return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);\n            default:\n                return null;\n        }\n    }\n\n    return {\n        internalFormat,\n        format\n    }\n}\n\nfunction supportRenderTextureFormat (gl, internalFormat, format, type) {\n    let texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null);\n\n    let fbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n    let status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    return status == gl.FRAMEBUFFER_COMPLETE;\n}\n\nfunction startGUI () {\n    var gui = new dat.GUI({ width: 300 });\n    gui.add(config, 'DYE_RESOLUTION', { 'high': 1024, 'medium': 512, 'low': 256, 'very low': 128 }).name('quality').onFinishChange(initFramebuffers);\n    gui.add(config, 'SIM_RESOLUTION', { '32': 32, '64': 64, '128': 128, '256': 256 }).name('sim resolution').onFinishChange(initFramebuffers);\n    gui.add(config, 'DENSITY_DISSIPATION', 0, 4.0).name('density diffusion');\n    gui.add(config, 'VELOCITY_DISSIPATION', 0, 4.0).name('velocity diffusion');\n    gui.add(config, 'PRESSURE', 0.0, 1.0).name('pressure');\n    gui.add(config, 'CURL', 0, 50).name('vorticity').step(1);\n    gui.add(config, 'SPLAT_RADIUS', 0.01, 1.0).name('splat radius');\n    gui.add(config, 'SHADING').name('shading').onFinishChange(updateKeywords);\n    gui.add(config, 'COLORFUL').name('colorful');\n    gui.add(config, 'PAUSED').name('paused').listen();\n\n    gui.add({ fun: () => {\n        splatStack.push(parseInt(Math.random() * 20) + 5);\n    } }, 'fun').name('Random splats');\n\n    let bloomFolder = gui.addFolder('Bloom');\n    bloomFolder.add(config, 'BLOOM').name('enabled').onFinishChange(updateKeywords);\n    bloomFolder.add(config, 'BLOOM_INTENSITY', 0.1, 2.0).name('intensity');\n    bloomFolder.add(config, 'BLOOM_THRESHOLD', 0.0, 1.0).name('threshold');\n\n    let sunraysFolder = gui.addFolder('Sunrays');\n    sunraysFolder.add(config, 'SUNRAYS').name('enabled').onFinishChange(updateKeywords);\n    sunraysFolder.add(config, 'SUNRAYS_WEIGHT', 0.3, 1.0).name('weight');\n\n    let captureFolder = gui.addFolder('Capture');\n    captureFolder.addColor(config, 'BACK_COLOR').name('background color');\n    captureFolder.add(config, 'TRANSPARENT').name('transparent');\n    captureFolder.add({ fun: captureScreenshot }, 'fun').name('take screenshot');\n\n   \n    if (isMobile())\n        gui.close();\n}\n\nfunction isMobile () {\n    return /Mobi|Android/i.test(navigator.userAgent);\n}\n\nfunction captureScreenshot () {\n    let res = getResolution(config.CAPTURE_RESOLUTION);\n    let target = createFBO(res.width, res.height, ext.formatRGBA.internalFormat, ext.formatRGBA.format, ext.halfFloatTexType, gl.NEAREST);\n    render(target);\n\n    let texture = framebufferToTexture(target);\n    texture = normalizeTexture(texture, target.width, target.height);\n\n    let captureCanvas = textureToCanvas(texture, target.width, target.height);\n    let datauri = captureCanvas.toDataURL();\n    downloadURI('fluid.png', datauri);\n    URL.revokeObjectURL(datauri);\n}\n\nfunction framebufferToTexture (target) {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.fbo);\n    let length = target.width * target.height * 4;\n    let texture = new Float32Array(length);\n    gl.readPixels(0, 0, target.width, target.height, gl.RGBA, gl.FLOAT, texture);\n    return texture;\n}\n\nfunction normalizeTexture (texture, width, height) {\n    let result = new Uint8Array(texture.length);\n    let id = 0;\n    for (let i = height - 1; i >= 0; i--) {\n        for (let j = 0; j < width; j++) {\n            let nid = i * width * 4 + j * 4;\n            result[nid + 0] = clamp01(texture[id + 0]) * 255;\n            result[nid + 1] = clamp01(texture[id + 1]) * 255;\n            result[nid + 2] = clamp01(texture[id + 2]) * 255;\n            result[nid + 3] = clamp01(texture[id + 3]) * 255;\n            id += 4;\n        }\n    }\n    return result;\n}\n\nfunction clamp01 (input) {\n    return Math.min(Math.max(input, 0), 1);\n}\n\nfunction textureToCanvas (texture, width, height) {\n    let captureCanvas = document.createElement('canvas');\n    let ctx = captureCanvas.getContext('2d');\n    captureCanvas.width = width;\n    captureCanvas.height = height;\n\n    let imageData = ctx.createImageData(width, height);\n    imageData.data.set(texture);\n    ctx.putImageData(imageData, 0, 0);\n\n    return captureCanvas;\n}\n\nfunction downloadURI (filename, uri) {\n    let link = document.createElement('a');\n    link.download = filename;\n    link.href = uri;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\n\nclass Material {\n    constructor (vertexShader, fragmentShaderSource) {\n        this.vertexShader = vertexShader;\n        this.fragmentShaderSource = fragmentShaderSource;\n        this.programs = [];\n        this.activeProgram = null;\n        this.uniforms = [];\n    }\n\n    setKeywords (keywords) {\n        let hash = 0;\n        for (let i = 0; i < keywords.length; i++)\n            hash += hashCode(keywords[i]);\n\n        let program = this.programs[hash];\n        if (program == null)\n        {\n            let fragmentShader = compileShader(gl.FRAGMENT_SHADER, this.fragmentShaderSource, keywords);\n            program = createProgram(this.vertexShader, fragmentShader);\n            this.programs[hash] = program;\n        }\n\n        if (program == this.activeProgram) return;\n\n        this.uniforms = getUniforms(program);\n        this.activeProgram = program;\n    }\n\n    bind () {\n        gl.useProgram(this.activeProgram);\n    }\n}\n\nclass Program {\n    constructor (vertexShader, fragmentShader) {\n        this.uniforms = {};\n        this.program = createProgram(vertexShader, fragmentShader);\n        this.uniforms = getUniforms(this.program);\n    }\n\n    bind () {\n        gl.useProgram(this.program);\n    }\n}\n\nfunction createProgram (vertexShader, fragmentShader) {\n    let program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        console.trace(gl.getProgramInfoLog(program));\n\n    return program;\n}\n\nfunction getUniforms (program) {\n    let uniforms = [];\n    let uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < uniformCount; i++) {\n        let uniformName = gl.getActiveUniform(program, i).name;\n        uniforms[uniformName] = gl.getUniformLocation(program, uniformName);\n    }\n    return uniforms;\n}\n\nfunction compileShader (type, source, keywords) {\n    source = addKeywords(source, keywords);\n\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        console.trace(gl.getShaderInfoLog(shader));\n\n    return shader;\n};\n\nfunction addKeywords (source, keywords) {\n    if (keywords == null) return source;\n    let keywordsString = '';\n    keywords.forEach(keyword => {\n        keywordsString += '#define ' + keyword + '\\n';\n    });\n    return keywordsString + source;\n}\n\nconst baseVertexShader = compileShader(gl.VERTEX_SHADER, `\n    precision highp float;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        vL = vUv - vec2(texelSize.x, 0.0);\n        vR = vUv + vec2(texelSize.x, 0.0);\n        vT = vUv + vec2(0.0, texelSize.y);\n        vB = vUv - vec2(0.0, texelSize.y);\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n`);\n\nconst blurVertexShader = compileShader(gl.VERTEX_SHADER, `\n    precision highp float;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        float offset = 1.33333333;\n        vL = vUv - texelSize * offset;\n        vR = vUv + texelSize * offset;\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n`);\n\nconst blurShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = texture2D(uTexture, vUv) * 0.29411764;\n        sum += texture2D(uTexture, vL) * 0.35294117;\n        sum += texture2D(uTexture, vR) * 0.35294117;\n        gl_FragColor = sum;\n    }\n`);\n\nconst copyShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        gl_FragColor = texture2D(uTexture, vUv);\n    }\n`);\n\nconst clearShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float value;\n\n    void main () {\n        gl_FragColor = value * texture2D(uTexture, vUv);\n    }\n`);\n\nconst colorShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision mediump float;\n\n    uniform vec4 color;\n\n    void main () {\n        gl_FragColor = color;\n    }\n`);\n\nconst checkerboardShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float aspectRatio;\n\n    #define SCALE 25.0\n\n    void main () {\n        vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\n        float v = mod(uv.x + uv.y, 2.0);\n        v = v * 0.1 + 0.8;\n        gl_FragColor = vec4(vec3(v), 1.0);\n    }\n`);\n\nconst displayShaderSource = `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uSunrays;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n    uniform vec2 texelSize;\n\n    vec3 linearToGamma (vec3 color) {\n        color = max(color, vec3(0));\n        return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\n    }\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n\n    #ifdef SHADING\n        vec3 lc = texture2D(uTexture, vL).rgb;\n        vec3 rc = texture2D(uTexture, vR).rgb;\n        vec3 tc = texture2D(uTexture, vT).rgb;\n        vec3 bc = texture2D(uTexture, vB).rgb;\n\n        float dx = length(rc) - length(lc);\n        float dy = length(tc) - length(bc);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        c *= diffuse;\n    #endif\n\n    #ifdef BLOOM\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n    #endif\n\n    #ifdef SUNRAYS\n        float sunrays = texture2D(uSunrays, vUv).r;\n        c *= sunrays;\n    #ifdef BLOOM\n        bloom *= sunrays;\n    #endif\n    #endif\n\n    #ifdef BLOOM\n        float noise = texture2D(uDithering, vUv * ditherScale).r;\n        noise = noise * 2.0 - 1.0;\n        bloom += noise / 255.0;\n        bloom = linearToGamma(bloom);\n        c += bloom;\n    #endif\n\n        float a = max(c.r, max(c.g, c.b));\n        gl_FragColor = vec4(c, a);\n    }\n`;\n\nconst bloomPrefilterShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform vec3 curve;\n    uniform float threshold;\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n        float br = max(c.r, max(c.g, c.b));\n        float rq = clamp(br - curve.x, 0.0, curve.y);\n        rq = curve.z * rq * rq;\n        c *= max(rq, br - threshold) / max(br, 0.0001);\n        gl_FragColor = vec4(c, 0.0);\n    }\n`);\n\nconst bloomBlurShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum;\n    }\n`);\n\nconst bloomFinalShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform float intensity;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum * intensity;\n    }\n`);\n\nconst sunraysMaskShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 c = texture2D(uTexture, vUv);\n        float br = max(c.r, max(c.g, c.b));\n        c.a = 1.0 - min(max(br * 20.0, 0.0), 0.8);\n        gl_FragColor = c;\n    }\n`);\n\nconst sunraysShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float weight;\n\n    #define ITERATIONS 16\n\n    void main () {\n        float Density = 0.3;\n        float Decay = 0.95;\n        float Exposure = 0.7;\n\n        vec2 coord = vUv;\n        vec2 dir = vUv - 0.5;\n\n        dir *= 1.0 / float(ITERATIONS) * Density;\n        float illuminationDecay = 1.0;\n\n        float color = texture2D(uTexture, vUv).a;\n\n        for (int i = 0; i < ITERATIONS; i++)\n        {\n            coord -= dir;\n            float col = texture2D(uTexture, coord).a;\n            color += col * illuminationDecay * weight;\n            illuminationDecay *= Decay;\n        }\n\n        gl_FragColor = vec4(color * Exposure, 0.0, 0.0, 1.0);\n    }\n`);\n\nconst splatShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTarget;\n    uniform float aspectRatio;\n    uniform vec3 color;\n    uniform vec2 point;\n    uniform float radius;\n\n    void main () {\n        vec2 p = vUv - point.xy;\n        p.x *= aspectRatio;\n        vec3 splat = exp(-dot(p, p) / radius) * color;\n        vec3 base = texture2D(uTarget, vUv).xyz;\n        gl_FragColor = vec4(base + splat, 1.0);\n    }\n`);\n\nconst advectionShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform vec2 dyeTexelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n        vec2 st = uv / tsize - 0.5;\n\n        vec2 iuv = floor(st);\n        vec2 fuv = fract(st);\n\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n    }\n\n    void main () {\n    #ifdef MANUAL_FILTERING\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n        vec4 result = bilerp(uSource, coord, dyeTexelSize);\n    #else\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n        vec4 result = texture2D(uSource, coord);\n    #endif\n        float decay = 1.0 + dissipation * dt;\n        gl_FragColor = result / decay;\n    }`,\n    ext.supportLinearFiltering ? null : ['MANUAL_FILTERING']\n);\n\nconst divergenceShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).x;\n        float R = texture2D(uVelocity, vR).x;\n        float T = texture2D(uVelocity, vT).y;\n        float B = texture2D(uVelocity, vB).y;\n\n        vec2 C = texture2D(uVelocity, vUv).xy;\n        if (vL.x < 0.0) { L = -C.x; }\n        if (vR.x > 1.0) { R = -C.x; }\n        if (vT.y > 1.0) { T = -C.y; }\n        if (vB.y < 0.0) { B = -C.y; }\n\n        float div = 0.5 * (R - L + T - B);\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n    }\n`);\n\nconst curlShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).y;\n        float R = texture2D(uVelocity, vR).y;\n        float T = texture2D(uVelocity, vT).x;\n        float B = texture2D(uVelocity, vB).x;\n        float vorticity = R - L - T + B;\n        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n    }\n`);\n\nconst vorticityShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uCurl;\n    uniform float curl;\n    uniform float dt;\n\n    void main () {\n        float L = texture2D(uCurl, vL).x;\n        float R = texture2D(uCurl, vR).x;\n        float T = texture2D(uCurl, vT).x;\n        float B = texture2D(uCurl, vB).x;\n        float C = texture2D(uCurl, vUv).x;\n\n        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n        force /= length(force) + 0.0001;\n        force *= curl * C;\n        force.y *= -1.0;\n\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity += force * dt;\n        velocity = min(max(velocity, -1000.0), 1000.0);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n`);\n\nconst pressureShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uDivergence;\n\n    void main () {\n        float L = texture2D(uPressure, vL).x;\n        float R = texture2D(uPressure, vR).x;\n        float T = texture2D(uPressure, vT).x;\n        float B = texture2D(uPressure, vB).x;\n        float C = texture2D(uPressure, vUv).x;\n        float divergence = texture2D(uDivergence, vUv).x;\n        float pressure = (L + R + B + T - divergence) * 0.25;\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n    }\n`);\n\nconst gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uPressure, vL).x;\n        float R = texture2D(uPressure, vR).x;\n        float T = texture2D(uPressure, vT).x;\n        float B = texture2D(uPressure, vB).x;\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity.xy -= vec2(R - L, T - B);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n`);\n\nconst blit = (() => {\n    gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), gl.STATIC_DRAW);\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(0);\n\n    return (target, clear = false) => {\n        if (target == null)\n        {\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        }\n        else\n        {\n            gl.viewport(0, 0, target.width, target.height);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, target.fbo);\n        }\n        if (clear)\n        {\n            gl.clearColor(0.0, 0.0, 0.0, 1.0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n        // CHECK_FRAMEBUFFER_STATUS();\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n    }\n})();\n\nfunction CHECK_FRAMEBUFFER_STATUS () {\n    let status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status != gl.FRAMEBUFFER_COMPLETE)\n        console.trace(\"Framebuffer error: \" + status);\n}\n\nlet dye;\nlet velocity;\nlet divergence;\nlet curl;\nlet pressure;\nlet bloom;\nlet bloomFramebuffers = [];\nlet sunrays;\nlet sunraysTemp;\n\nlet ditheringTexture = createTextureAsync('LDR_LLL1_0.png');\n\nconst blurProgram            = new Program(blurVertexShader, blurShader);\nconst copyProgram            = new Program(baseVertexShader, copyShader);\nconst clearProgram           = new Program(baseVertexShader, clearShader);\nconst colorProgram           = new Program(baseVertexShader, colorShader);\nconst checkerboardProgram    = new Program(baseVertexShader, checkerboardShader);\nconst bloomPrefilterProgram  = new Program(baseVertexShader, bloomPrefilterShader);\nconst bloomBlurProgram       = new Program(baseVertexShader, bloomBlurShader);\nconst bloomFinalProgram      = new Program(baseVertexShader, bloomFinalShader);\nconst sunraysMaskProgram     = new Program(baseVertexShader, sunraysMaskShader);\nconst sunraysProgram         = new Program(baseVertexShader, sunraysShader);\nconst splatProgram           = new Program(baseVertexShader, splatShader);\nconst advectionProgram       = new Program(baseVertexShader, advectionShader);\nconst divergenceProgram      = new Program(baseVertexShader, divergenceShader);\nconst curlProgram            = new Program(baseVertexShader, curlShader);\nconst vorticityProgram       = new Program(baseVertexShader, vorticityShader);\nconst pressureProgram        = new Program(baseVertexShader, pressureShader);\nconst gradienSubtractProgram = new Program(baseVertexShader, gradientSubtractShader);\n\nconst displayMaterial = new Material(baseVertexShader, displayShaderSource);\n\nfunction initFramebuffers () {\n    let simRes = getResolution(config.SIM_RESOLUTION);\n    let dyeRes = getResolution(config.DYE_RESOLUTION);\n\n    const texType = ext.halfFloatTexType;\n    const rgba    = ext.formatRGBA;\n    const rg      = ext.formatRG;\n    const r       = ext.formatR;\n    const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\n\n    gl.disable(gl.BLEND);\n\n    if (dye == null)\n        dye = createDoubleFBO(dyeRes.width, dyeRes.height, rgba.internalFormat, rgba.format, texType, filtering);\n    else\n        dye = resizeDoubleFBO(dye, dyeRes.width, dyeRes.height, rgba.internalFormat, rgba.format, texType, filtering);\n\n    if (velocity == null)\n        velocity = createDoubleFBO(simRes.width, simRes.height, rg.internalFormat, rg.format, texType, filtering);\n    else\n        velocity = resizeDoubleFBO(velocity, simRes.width, simRes.height, rg.internalFormat, rg.format, texType, filtering);\n\n    divergence = createFBO      (simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);\n    curl       = createFBO      (simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);\n    pressure   = createDoubleFBO(simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);\n\n    initBloomFramebuffers();\n    initSunraysFramebuffers();\n}\n\nfunction initBloomFramebuffers () {\n    let res = getResolution(config.BLOOM_RESOLUTION);\n\n    const texType = ext.halfFloatTexType;\n    const rgba = ext.formatRGBA;\n    const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\n\n    bloom = createFBO(res.width, res.height, rgba.internalFormat, rgba.format, texType, filtering);\n\n    bloomFramebuffers.length = 0;\n    for (let i = 0; i < config.BLOOM_ITERATIONS; i++)\n    {\n        let width = res.width >> (i + 1);\n        let height = res.height >> (i + 1);\n\n        if (width < 2 || height < 2) break;\n\n        let fbo = createFBO(width, height, rgba.internalFormat, rgba.format, texType, filtering);\n        bloomFramebuffers.push(fbo);\n    }\n}\n\nfunction initSunraysFramebuffers () {\n    let res = getResolution(config.SUNRAYS_RESOLUTION);\n\n    const texType = ext.halfFloatTexType;\n    const r = ext.formatR;\n    const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\n\n    sunrays     = createFBO(res.width, res.height, r.internalFormat, r.format, texType, filtering);\n    sunraysTemp = createFBO(res.width, res.height, r.internalFormat, r.format, texType, filtering);\n}\n\nfunction createFBO (w, h, internalFormat, format, type, param) {\n    gl.activeTexture(gl.TEXTURE0);\n    let texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);\n\n    let fbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    gl.viewport(0, 0, w, h);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    let texelSizeX = 1.0 / w;\n    let texelSizeY = 1.0 / h;\n\n    return {\n        texture,\n        fbo,\n        width: w,\n        height: h,\n        texelSizeX,\n        texelSizeY,\n        attach (id) {\n            gl.activeTexture(gl.TEXTURE0 + id);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            return id;\n        }\n    };\n}\n\nfunction createDoubleFBO (w, h, internalFormat, format, type, param) {\n    let fbo1 = createFBO(w, h, internalFormat, format, type, param);\n    let fbo2 = createFBO(w, h, internalFormat, format, type, param);\n\n    return {\n        width: w,\n        height: h,\n        texelSizeX: fbo1.texelSizeX,\n        texelSizeY: fbo1.texelSizeY,\n        get read () {\n            return fbo1;\n        },\n        set read (value) {\n            fbo1 = value;\n        },\n        get write () {\n            return fbo2;\n        },\n        set write (value) {\n            fbo2 = value;\n        },\n        swap () {\n            let temp = fbo1;\n            fbo1 = fbo2;\n            fbo2 = temp;\n        }\n    }\n}\n\nfunction resizeFBO (target, w, h, internalFormat, format, type, param) {\n    let newFBO = createFBO(w, h, internalFormat, format, type, param);\n    copyProgram.bind();\n    gl.uniform1i(copyProgram.uniforms.uTexture, target.attach(0));\n    blit(newFBO);\n    return newFBO;\n}\n\nfunction resizeDoubleFBO (target, w, h, internalFormat, format, type, param) {\n    if (target.width == w && target.height == h)\n        return target;\n    target.read = resizeFBO(target.read, w, h, internalFormat, format, type, param);\n    target.write = createFBO(w, h, internalFormat, format, type, param);\n    target.width = w;\n    target.height = h;\n    target.texelSizeX = 1.0 / w;\n    target.texelSizeY = 1.0 / h;\n    return target;\n}\n\nfunction createTextureAsync (url) {\n    let texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 255]));\n\n    let obj = {\n        texture,\n        width: 1,\n        height: 1,\n        attach (id) {\n            gl.activeTexture(gl.TEXTURE0 + id);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            return id;\n        }\n    };\n\n    let image = new Image();\n    image.onload = () => {\n        obj.width = image.width;\n        obj.height = image.height;\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);\n    };\n    image.src = url;\n\n    return obj;\n}\n\nfunction updateKeywords () {\n    let displayKeywords = [];\n    if (config.SHADING) displayKeywords.push(\"SHADING\");\n    if (config.BLOOM) displayKeywords.push(\"BLOOM\");\n    if (config.SUNRAYS) displayKeywords.push(\"SUNRAYS\");\n    displayMaterial.setKeywords(displayKeywords);\n}\n\nupdateKeywords();\ninitFramebuffers();\nmultipleSplats(parseInt(Math.random() * 20) + 5);\n\nlet lastUpdateTime = Date.now();\nlet colorUpdateTimer = 0.0;\nupdate();\n\nfunction update () {\n    const dt = calcDeltaTime();\n    if (resizeCanvas())\n        initFramebuffers();\n    updateColors(dt);\n    applyInputs();\n    if (!config.PAUSED)\n        step(dt);\n    render(null);\n    requestAnimationFrame(update);\n}\n\nfunction calcDeltaTime () {\n    let now = Date.now();\n    let dt = (now - lastUpdateTime) / 1000;\n    dt = Math.min(dt, 0.016666);\n    lastUpdateTime = now;\n    return dt;\n}\n\nfunction resizeCanvas () {\n    let width = scaleByPixelRatio(canvas.clientWidth);\n    let height = scaleByPixelRatio(canvas.clientHeight);\n    if (canvas.width != width || canvas.height != height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n\nfunction updateColors (dt) {\n    if (!config.COLORFUL) return;\n\n    colorUpdateTimer += dt * config.COLOR_UPDATE_SPEED;\n    if (colorUpdateTimer >= 1) {\n        colorUpdateTimer = wrap(colorUpdateTimer, 0, 1);\n        pointers.forEach(p => {\n            p.color = generateColor();\n        });\n    }\n}\n\nfunction applyInputs () {\n    if (splatStack.length > 0)\n        multipleSplats(splatStack.pop());\n\n    pointers.forEach(p => {\n        if (p.moved) {\n            p.moved = false;\n            splatPointer(p);\n        }\n    });\n}\n\nfunction step (dt) {\n    gl.disable(gl.BLEND);\n\n    curlProgram.bind();\n    gl.uniform2f(curlProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\n    gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read.attach(0));\n    blit(curl);\n\n    vorticityProgram.bind();\n    gl.uniform2f(vorticityProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\n    gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read.attach(0));\n    gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.attach(1));\n    gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);\n    gl.uniform1f(vorticityProgram.uniforms.dt, dt);\n    blit(velocity.write);\n    velocity.swap();\n\n    divergenceProgram.bind();\n    gl.uniform2f(divergenceProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\n    gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read.attach(0));\n    blit(divergence);\n\n    clearProgram.bind();\n    gl.uniform1i(clearProgram.uniforms.uTexture, pressure.read.attach(0));\n    gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE);\n    blit(pressure.write);\n    pressure.swap();\n\n    pressureProgram.bind();\n    gl.uniform2f(pressureProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\n    gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence.attach(0));\n    for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {\n        gl.uniform1i(pressureProgram.uniforms.uPressure, pressure.read.attach(1));\n        blit(pressure.write);\n        pressure.swap();\n    }\n\n    gradienSubtractProgram.bind();\n    gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\n    gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.read.attach(0));\n    gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.read.attach(1));\n    blit(velocity.write);\n    velocity.swap();\n\n    advectionProgram.bind();\n    gl.uniform2f(advectionProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\n    if (!ext.supportLinearFiltering)\n        gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, velocity.texelSizeX, velocity.texelSizeY);\n    let velocityId = velocity.read.attach(0);\n    gl.uniform1i(advectionProgram.uniforms.uVelocity, velocityId);\n    gl.uniform1i(advectionProgram.uniforms.uSource, velocityId);\n    gl.uniform1f(advectionProgram.uniforms.dt, dt);\n    gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);\n    blit(velocity.write);\n    velocity.swap();\n\n    if (!ext.supportLinearFiltering)\n        gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, dye.texelSizeX, dye.texelSizeY);\n    gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read.attach(0));\n    gl.uniform1i(advectionProgram.uniforms.uSource, dye.read.attach(1));\n    gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);\n    blit(dye.write);\n    dye.swap();\n}\n\nfunction render (target) {\n    if (config.BLOOM)\n        applyBloom(dye.read, bloom);\n    if (config.SUNRAYS) {\n        applySunrays(dye.read, dye.write, sunrays);\n        blur(sunrays, sunraysTemp, 1);\n    }\n\n    if (target == null || !config.TRANSPARENT) {\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.enable(gl.BLEND);\n    }\n    else {\n        gl.disable(gl.BLEND);\n    }\n\n    if (!config.TRANSPARENT)\n        drawColor(target, normalizeColor(config.BACK_COLOR));\n    if (target == null && config.TRANSPARENT)\n        drawCheckerboard(target);\n    drawDisplay(target);\n}\n\nfunction drawColor (target, color) {\n    colorProgram.bind();\n    gl.uniform4f(colorProgram.uniforms.color, color.r, color.g, color.b, 1);\n    blit(target);\n}\n\nfunction drawCheckerboard (target) {\n    checkerboardProgram.bind();\n    gl.uniform1f(checkerboardProgram.uniforms.aspectRatio, canvas.width / canvas.height);\n    blit(target);\n}\n\nfunction drawDisplay (target) {\n    let width = target == null ? gl.drawingBufferWidth : target.width;\n    let height = target == null ? gl.drawingBufferHeight : target.height;\n\n    displayMaterial.bind();\n    if (config.SHADING)\n        gl.uniform2f(displayMaterial.uniforms.texelSize, 1.0 / width, 1.0 / height);\n    gl.uniform1i(displayMaterial.uniforms.uTexture, dye.read.attach(0));\n    if (config.BLOOM) {\n        gl.uniform1i(displayMaterial.uniforms.uBloom, bloom.attach(1));\n        gl.uniform1i(displayMaterial.uniforms.uDithering, ditheringTexture.attach(2));\n        let scale = getTextureScale(ditheringTexture, width, height);\n        gl.uniform2f(displayMaterial.uniforms.ditherScale, scale.x, scale.y);\n    }\n    if (config.SUNRAYS)\n        gl.uniform1i(displayMaterial.uniforms.uSunrays, sunrays.attach(3));\n    blit(target);\n}\n\nfunction applyBloom (source, destination) {\n    if (bloomFramebuffers.length < 2)\n        return;\n\n    let last = destination;\n\n    gl.disable(gl.BLEND);\n    bloomPrefilterProgram.bind();\n    let knee = config.BLOOM_THRESHOLD * config.BLOOM_SOFT_KNEE + 0.0001;\n    let curve0 = config.BLOOM_THRESHOLD - knee;\n    let curve1 = knee * 2;\n    let curve2 = 0.25 / knee;\n    gl.uniform3f(bloomPrefilterProgram.uniforms.curve, curve0, curve1, curve2);\n    gl.uniform1f(bloomPrefilterProgram.uniforms.threshold, config.BLOOM_THRESHOLD);\n    gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture, source.attach(0));\n    blit(last);\n\n    bloomBlurProgram.bind();\n    for (let i = 0; i < bloomFramebuffers.length; i++) {\n        let dest = bloomFramebuffers[i];\n        gl.uniform2f(bloomBlurProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY);\n        gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0));\n        blit(dest);\n        last = dest;\n    }\n\n    gl.blendFunc(gl.ONE, gl.ONE);\n    gl.enable(gl.BLEND);\n\n    for (let i = bloomFramebuffers.length - 2; i >= 0; i--) {\n        let baseTex = bloomFramebuffers[i];\n        gl.uniform2f(bloomBlurProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY);\n        gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0));\n        gl.viewport(0, 0, baseTex.width, baseTex.height);\n        blit(baseTex);\n        last = baseTex;\n    }\n\n    gl.disable(gl.BLEND);\n    bloomFinalProgram.bind();\n    gl.uniform2f(bloomFinalProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY);\n    gl.uniform1i(bloomFinalProgram.uniforms.uTexture, last.attach(0));\n    gl.uniform1f(bloomFinalProgram.uniforms.intensity, config.BLOOM_INTENSITY);\n    blit(destination);\n}\n\nfunction applySunrays (source, mask, destination) {\n    gl.disable(gl.BLEND);\n    sunraysMaskProgram.bind();\n    gl.uniform1i(sunraysMaskProgram.uniforms.uTexture, source.attach(0));\n    blit(mask);\n\n    sunraysProgram.bind();\n    gl.uniform1f(sunraysProgram.uniforms.weight, config.SUNRAYS_WEIGHT);\n    gl.uniform1i(sunraysProgram.uniforms.uTexture, mask.attach(0));\n    blit(destination);\n}\n\nfunction blur (target, temp, iterations) {\n    blurProgram.bind();\n    for (let i = 0; i < iterations; i++) {\n        gl.uniform2f(blurProgram.uniforms.texelSize, target.texelSizeX, 0.0);\n        gl.uniform1i(blurProgram.uniforms.uTexture, target.attach(0));\n        blit(temp);\n\n        gl.uniform2f(blurProgram.uniforms.texelSize, 0.0, target.texelSizeY);\n        gl.uniform1i(blurProgram.uniforms.uTexture, temp.attach(0));\n        blit(target);\n    }\n}\n\nfunction splatPointer (pointer) {\n    let dx = pointer.deltaX * config.SPLAT_FORCE;\n    let dy = pointer.deltaY * config.SPLAT_FORCE;\n    splat(pointer.texcoordX, pointer.texcoordY, dx, dy, pointer.color);\n}\n\nfunction multipleSplats (amount) {\n    for (let i = 0; i < amount; i++) {\n        const color = generateColor();\n        color.r *= 10.0;\n        color.g *= 10.0;\n        color.b *= 10.0;\n        const x = Math.random();\n        const y = Math.random();\n        const dx = 1000 * (Math.random() - 0.5);\n        const dy = 1000 * (Math.random() - 0.5);\n        splat(x, y, dx, dy, color);\n    }\n}\n\nfunction splat (x, y, dx, dy, color) {\n    splatProgram.bind();\n    gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read.attach(0));\n    gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);\n    gl.uniform2f(splatProgram.uniforms.point, x, y);\n    gl.uniform3f(splatProgram.uniforms.color, dx, dy, 0.0);\n    gl.uniform1f(splatProgram.uniforms.radius, correctRadius(config.SPLAT_RADIUS / 100.0));\n    blit(velocity.write);\n    velocity.swap();\n\n    gl.uniform1i(splatProgram.uniforms.uTarget, dye.read.attach(0));\n    gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b);\n    blit(dye.write);\n    dye.swap();\n}\n\nfunction correctRadius (radius) {\n    let aspectRatio = canvas.width / canvas.height;\n    if (aspectRatio > 1)\n        radius *= aspectRatio;\n    return radius;\n}\n\n// canvas.addEventListener('mousedown', e => {\n//     let posX = scaleByPixelRatio(e.offsetX);\n//     let posY = scaleByPixelRatio(e.offsetY);\n//     let pointer = pointers.find(p => p.id == -1);\n//     if (pointer == null)\n//         pointer = new pointerPrototype();\n//     updatePointerDownData(pointer, -1, posX, posY);\n// });\n\ncanvas.addEventListener('mousemove', e => {\n    let pointer = pointers[0];\n    // if (!pointer.down) return;\n    let posX = scaleByPixelRatio(e.offsetX);\n    let posY = scaleByPixelRatio(e.offsetY);\n    updatePointerMoveData(pointer, posX, posY);\n});\n\n// window.addEventListener('mouseup', () => {\n//     updatePointerUpData(pointers[0]);\n// });\n\ncanvas.addEventListener('touchstart', e => {\n    e.preventDefault();\n    const touches = e.targetTouches;\n    while (touches.length >= pointers.length)\n        pointers.push(new pointerPrototype());\n    for (let i = 0; i < touches.length; i++) {\n        let posX = scaleByPixelRatio(touches[i].pageX);\n        let posY = scaleByPixelRatio(touches[i].pageY);\n        updatePointerDownData(pointers[i + 1], touches[i].identifier, posX, posY);\n    }\n});\n\ncanvas.addEventListener('touchmove', e => {\n    e.preventDefault();\n    const touches = e.targetTouches;\n    for (let i = 0; i < touches.length; i++) {\n        let pointer = pointers[i + 1];\n        if (!pointer.down) continue;\n        let posX = scaleByPixelRatio(touches[i].pageX);\n        let posY = scaleByPixelRatio(touches[i].pageY);\n        updatePointerMoveData(pointer, posX, posY);\n    }\n}, false);\n\nwindow.addEventListener('touchend', e => {\n    const touches = e.changedTouches;\n    for (let i = 0; i < touches.length; i++)\n    {\n        let pointer = pointers.find(p => p.id == touches[i].identifier);\n        if (pointer == null) continue;\n        updatePointerUpData(pointer);\n    }\n});\n\n// window.addEventListener('keydown', e => {\n//     if (e.code === 'KeyP')\n//         config.PAUSED = !config.PAUSED;\n//     if (e.key === ' ')\n//         splatStack.push(parseInt(Math.random() * 20) + 5);\n// });\n\nfunction updatePointerDownData (pointer, id, posX, posY) {\n    pointer.id = id;\n    pointer.down = true;\n    pointer.moved = false;\n    pointer.texcoordX = posX / canvas.width;\n    pointer.texcoordY = 1.0 - posY / canvas.height;\n    pointer.prevTexcoordX = pointer.texcoordX;\n    pointer.prevTexcoordY = pointer.texcoordY;\n    pointer.deltaX = 0;\n    pointer.deltaY = 0;\n    pointer.color = generateColor();\n}\n\nfunction updatePointerMoveData (pointer, posX, posY) {\n    pointer.prevTexcoordX = pointer.texcoordX;\n    pointer.prevTexcoordY = pointer.texcoordY;\n    pointer.texcoordX = posX / canvas.width;\n    pointer.texcoordY = 1.0 - posY / canvas.height;\n    pointer.deltaX = correctDeltaX(pointer.texcoordX - pointer.prevTexcoordX);\n    pointer.deltaY = correctDeltaY(pointer.texcoordY - pointer.prevTexcoordY);\n    pointer.moved = Math.abs(pointer.deltaX) > 0 || Math.abs(pointer.deltaY) > 0;\n}\n\nfunction updatePointerUpData (pointer) {\n    pointer.down = false;\n}\n\nfunction correctDeltaX (delta) {\n    let aspectRatio = canvas.width / canvas.height;\n    if (aspectRatio < 1) delta *= aspectRatio;\n    return delta;\n}\n\nfunction correctDeltaY (delta) {\n    let aspectRatio = canvas.width / canvas.height;\n    if (aspectRatio > 1) delta /= aspectRatio;\n    return delta;\n}\n\nfunction generateColor () {\n    let c = HSVtoRGB(Math.random(), 1.0, 1.0);\n    c.r *= 0.15;\n    c.g *= 0.15;\n    c.b *= 0.15;\n    return c;\n}\n\nfunction HSVtoRGB (h, s, v) {\n    let r, g, b, i, f, p, q, t;\n    i = Math.floor(h * 6);\n    f = h * 6 - i;\n    p = v * (1 - s);\n    q = v * (1 - f * s);\n    t = v * (1 - (1 - f) * s);\n\n    switch (i % 6) {\n        case 0: r = v, g = t, b = p; break;\n        case 1: r = q, g = v, b = p; break;\n        case 2: r = p, g = v, b = t; break;\n        case 3: r = p, g = q, b = v; break;\n        case 4: r = t, g = p, b = v; break;\n        case 5: r = v, g = p, b = q; break;\n    }\n\n    return {\n        r,\n        g,\n        b\n    };\n}\n\nfunction normalizeColor (input) {\n    let output = {\n        r: input.r / 255,\n        g: input.g / 255,\n        b: input.b / 255\n    };\n    return output;\n}\n\nfunction wrap (value, min, max) {\n    let range = max - min;\n    if (range == 0) return min;\n    return (value - min) % range + min;\n}\n\nfunction getResolution (resolution) {\n    let aspectRatio = gl.drawingBufferWidth / gl.drawingBufferHeight;\n    if (aspectRatio < 1)\n        aspectRatio = 1.0 / aspectRatio;\n\n    let min = Math.round(resolution);\n    let max = Math.round(resolution * aspectRatio);\n\n    if (gl.drawingBufferWidth > gl.drawingBufferHeight)\n        return { width: max, height: min };\n    else\n        return { width: min, height: max };\n}\n\nfunction getTextureScale (texture, width, height) {\n    return {\n        x: width / texture.width,\n        y: height / texture.height\n    };\n}\n\nfunction scaleByPixelRatio (input) {\n    let pixelRatio = window.devicePixelRatio || 1;\n    return Math.floor(input * pixelRatio);\n}\n\nfunction hashCode (s) {\n    if (s.length == 0) return 0;\n    let hash = 0;\n    for (let i = 0; i < s.length; i++) {\n        hash = (hash << 5) - hash + s.charCodeAt(i);\n        hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n};"],"names":[],"version":3,"file":"index.8e83f00f.js.map","sourceRoot":"/__parcel_source_root/"}